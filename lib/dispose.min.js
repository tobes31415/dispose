const o=Symbol("Dispose Callbacks"),s=Symbol("Is Disposed");function e(o){try{o()}catch(o){console.error("Error occured during dispose: "+o)}}export function isDisposed(o){return!!o[s]};export function dispose(i){isDisposed(i)||(i[s]=!0,i[o]&&i[o].forEach(e))};export function onDispose(s,e){s[o]||(s[o]=[]),s[o].push(e)};export function onDisposeChain(o,s){onDispose(o,()=>dispose(s))};export function assertNotDisposed(o,s){if(isDisposed(o))throw new Error(s||"Object has been disposed")};export function createDisposeableFunctionWrapper(o,s){const e=(...i)=>(assertNotDisposed(e,s),o.apply(this,i));return e};